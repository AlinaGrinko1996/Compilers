package boris.tserinher.SymbolTable;

import boris.tserinher.MiniJavaGrammarBaseListener;
import boris.tserinher.MiniJavaGrammarParser.ClassDeclarationContext;
import boris.tserinher.MiniJavaGrammarParser.FieldContext;
import boris.tserinher.MiniJavaGrammarParser.MainClassContext;
import boris.tserinher.MiniJavaGrammarParser.MainMethodContext;
import boris.tserinher.MiniJavaGrammarParser.MethodContext;
import boris.tserinher.MiniJavaGrammarParser.ParameterContext;
import boris.tserinher.MiniJavaGrammarParser.ProgramContext;
import boris.tserinher.Records.ClassRecord;
import boris.tserinher.Records.MethodRecord;
import boris.tserinher.Records.VarRecord;

public class SymbolTableListener extends MiniJavaGrammarBaseListener {
	
	private SymbolTable symbolTable;
	
	public SymbolTableListener() {
		super();
	}

	public SymbolTableListener(SymbolTable symbolTable) {
		super();
		this.symbolTable = symbolTable;
	}

	@Override
	public void enterProgram(ProgramContext ctx) {
		System.out.println("");
		System.out.println("Enter Program");
		super.enterProgram(ctx);
	}
	
	@Override
	public void exitProgram(ProgramContext ctx) {
		// TODO Auto-generated method stub
		super.exitProgram(ctx);
	}

	@Override
	public void enterMainClass(MainClassContext ctx) {
		
		String id = ctx.getChild(1).toString();
		String type = ctx.getChild(0).toString();
		
		ClassRecord mainClassRecord = new ClassRecord(id, type);
		
		symbolTable.enterScope();
		
		
		System.out.printf("Enter: Main class(id = %s; type = %s) \n", id, type);
		
		
		//symbolTable.putRecord(id, mainClassRecord);
	
		
		super.enterMainClass(ctx);
	}

	@Override
	public void exitMainClass(MainClassContext ctx) {
		symbolTable.exitScope();
		System.out.println("Exit Main Class");
		super.exitMainClass(ctx);
	}
	
	@Override
	public void enterClassDeclaration(ClassDeclarationContext ctx) {
		String id = ctx.getChild(1).toString();
		String type = ctx.getChild(0).toString();
		
		ClassRecord classRecord = new ClassRecord(id, type);
		
		symbolTable.enterScope();
		
		System.out.printf("Enter: Class(id = %s; type = %s) \n", id, type);
		
		//symbolTable.putRecord(id, mainClassRecord);
		super.enterClassDeclaration(ctx);
	}

	@Override
	public void exitClassDeclaration(ClassDeclarationContext ctx) {
		symbolTable.exitScope();
		System.out.printf("Exit Class: %s \n", ctx.getChild(1));
		super.exitClassDeclaration(ctx);
	}
	
	@Override
	public void enterMainMethod(MainMethodContext ctx) {
		String id = ctx.getChild(3).toString();
		String type = ctx.getChild(2).toString();
		symbolTable.enterScope();
		MethodRecord mainMethodRecord = new MethodRecord(id, type);
		
		System.out.printf("Enter: Main method(id = %s; type = %s) \n", id, type);
		
		//symbolTable.putRecord(id, methodRecord);
		
		super.enterMainMethod(ctx);
	}

	@Override
	public void exitMainMethod(MainMethodContext ctx) {
		symbolTable.exitScope();
		System.out.printf("Exit Method: %s \n", ctx.getChild(2));
		super.exitMainMethod(ctx);
	}	

	@Override
	public void enterMethod(MethodContext ctx) {
		String id = ctx.getChild(1).toString();
		String type = ctx.getChild(0).getChild(0).getChild(0).toString();
		
		MethodRecord methodRecord = new MethodRecord(id, type);
		symbolTable.enterScope();
		System.out.printf("Enter: Method(id = %s; type = %s) \n", id, type);
		
		//symbolTable.putRecord(id, methodRecord);
		super.enterMethod(ctx);
	}

	@Override
	public void exitMethod(MethodContext ctx) {
		symbolTable.exitScope();
		System.out.printf("Exit Method: %s \n", ctx.getChild(1));
		super.exitMethod(ctx);
	}

	@Override
	public void enterField(FieldContext ctx) {
		String id = ctx.getChild(1).toString();
		String type = ctx.getChild(0).getChild(0).getChild(0).toString();
		
		VarRecord fieldRecord = new VarRecord(id, type);
		symbolTable.enterScope();
		System.out.printf("Enter: Field(id = %s; type = %s) \n", id, type);
		
		//symbolTable.putRecord(id, fieldRecord);
		super.enterField(ctx);
	}

	@Override
	public void exitField(FieldContext ctx) {
		System.out.printf("Exit Field: %s \n", ctx.getChild(1));
		super.exitField(ctx);
	}
	
	@Override
	public void enterParameter(ParameterContext ctx) {
		String id = ctx.getChild(1).toString();
		String type = ctx.getChild(0).getChild(0).getChild(0).toString();
		
		VarRecord parameterRecord = new VarRecord(id, type);
		symbolTable.enterScope();
		System.out.printf("Enter: Parametr(id = %s; type = %s) \n", id, type);
		
		//symbolTable.putRecord(id, parameterRecord);
		super.enterParameter(ctx);
	}

	@Override
	public void exitParameter(ParameterContext ctx) {
		// TODO Auto-generated method stub
		super.exitParameter(ctx);
	}

	
	

}
